name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Build and push Docker images
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/task-service:${{ github.sha }} ./TaskService
          docker push ${{ env.DOCKERHUB_USERNAME }}/task-service:${{ github.sha }}
          docker tag ${{ env.DOCKERHUB_USERNAME }}/task-service:${{ github.sha }} ${{ env.DOCKERHUB_USERNAME }}/task-service:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/task-service:latest
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/category-service:${{ github.sha }} ./CategoryService
          docker push ${{ env.DOCKERHUB_USERNAME }}/category-service:${{ github.sha }}
          docker tag ${{ env.DOCKERHUB_USERNAME }}/category-service:${{ github.sha }} ${{ env.DOCKERHUB_USERNAME }}/category-service:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/category-service:latest

      - name: Deploy containers
        run: |
          docker-compose up -d

      - name: Check running containers
        run: |
          docker ps -a

      - name: Check container logs
        run: |
          docker-compose logs

      - name: Install mssql-tools in SQL Server container
        run: |
          docker exec -u root sql-server-container /bin/bash -c "apt-get update && apt-get install -y gnupg curl"
          docker exec -u root sql-server-container /bin/bash -c "curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -"
          docker exec -u root sql-server-container /bin/bash -c "curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list"
          docker exec -u root sql-server-container /bin/bash -c "apt-get update && ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev"
          docker exec -u root sql-server-container /bin/bash -c "echo 'export PATH=\"\$PATH:/opt/mssql-tools/bin\"' >> /root/.bashrc"

      - name: Wait for SQL Server
        run: |
          until docker exec sql-server-container /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Kwameldx666 -Q "SELECT 1"; do
            echo "Waiting for SQL Server..."
            sleep 5
          done

      - name: Test containers health
        run: |
          curl --retry 15 --retry-delay 5 --retry-max-time 300 http://localhost:5001/api/Tasks || echo "Task Service failed"
          curl --retry 15 --retry-delay 5 --retry-max-time 300 http://localhost:5000/api/Categories || echo "Category Service failed"

      - name: Cleanup
        if: always()
        run: |
          docker-compose down --volumes
