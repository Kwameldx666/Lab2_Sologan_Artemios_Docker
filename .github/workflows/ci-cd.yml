name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Установка netcat-openbsd вместо netcat
      - name: Install netcat on host
        run: |
          sudo apt-get update && sudo apt-get install -y netcat-openbsd

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Build and push Docker images
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/task-service:${{ github.sha }} ./TaskService
          docker push ${{ env.DOCKERHUB_USERNAME }}/task-service:${{ github.sha }}
          docker tag ${{ env.DOCKERHUB_USERNAME }}/task-service:${{ github.sha }} ${{ env.DOCKERHUB_USERNAME }}/task-service:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/task-service:latest
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/category-service:${{ github.sha }} ./CategoryService
          docker push ${{ env.DOCKERHUB_USERNAME }}/category-service:${{ github.sha }}
          docker tag ${{ env.DOCKERHUB_USERNAME }}/category-service:${{ github.sha }} ${{ env.DOCKERHUB_USERNAME }}/category-service:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/category-service:latest

      - name: Deploy containers
        run: |
          docker-compose up -d

      - name: Check running containers
        run: |
          docker ps -a

      - name: Check container logs
        run: |
          docker-compose logs

      - name: Wait for SQL Server
        run: |
          until nc -z localhost 1433; do
            echo "Waiting for SQL Server..."
            sleep 5
          done
      - name: Check container logs after delay
        run: |
          sleep 60  
          docker-compose logs    

      - name: Test containers health
        run: |
          curl --retry 15 --retry-delay 5 --retry-max-time 300 http://localhost:5001/api/Tasks || echo "Task Service failed"
          curl --retry 15 --retry-delay 5 --retry-max-time 300 http://localhost:5000/api/Categories || echo "Category Service failed"
      - name: Cleanup containers
        if: always()
        run: |
          docker-compose down   


